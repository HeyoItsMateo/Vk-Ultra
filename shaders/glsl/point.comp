#version 450

struct camera {
    mat4 view;
    mat4 proj;
    vec3 position;
};

layout(binding = 0) uniform UniformBufferObject {
    double dt;
    mat4 model;
    camera cam;
} ubo;

struct Particle {
	vec4 position; // position (x,y,z), mass (w)
    vec4 color;
    //vec2 texCoord;
    vec4 velocity;
};

layout(std140, set = 1, binding = 0) readonly buffer inSSBO {
   Particle particle_0[ ];
};

layout(std140, set = 1, binding = 1) buffer outSSBO {
   Particle particle_1[ ];
};

layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

// Organization and Indexing
// GlobalInvocationID is a vec3 so integer indexing requires breaking down the global invocation into local invocations and work group sizes.
uvec3 nWG = gl_NumWorkGroups;
uvec3 sWG = gl_WorkGroupSize;
// Indexes workgroups into the identities of the particles - the "self"
uint i = gl_WorkGroupID.x + (nWG.x * gl_WorkGroupID.y) + (nWG.x * nWG.y * gl_WorkGroupID.z);
// Indexes local invocations into the identities of the particles - the "others"
uint j = gl_LocalInvocationID.x + (sWG.x * gl_LocalInvocationID.y) + (sWG.x * sWG.y * gl_LocalInvocationID.z);

// Globals
float dt = float(ubo.dt);
const float c = 1.0f;
const float e = 2.7182818284;

const vec4 boundarySize = vec4(0.8f);



// Calculates acceleration towards a position
vec3 Gravity(vec4 p0, vec4 p1) {
    float m0 = p0.w * p0.w;
    float c2 = c*c;

    vec3 rN = normalize(p1.xyz - p0.xyz);
    float dist2 = distance(p1.xyz, p0.xyz);
    dist2 *= dist2;

    return rN * ((c2 * m0 * p1.w) / (4 + c2 * m0 * dist2));
}

float OOBcheck(float axisPosition, float axisVelocity, float axisBoundary) {
    float adjustedPosition = axisPosition;
    if (axisPosition < -boundarySize.x){
        adjustedPosition = (axisVelocity * dt) - axisBoundary;
    }
    if (axisPosition > boundarySize.x) {
        adjustedPosition = (axisVelocity * dt) + axisBoundary;
    }
    return adjustedPosition;
}

float out_of_bounds(float axisPosition, float axisVelocity, float axisBoundary) {
    if ((axisPosition <= -axisBoundary) || (axisPosition >= axisBoundary)) {
        return OOBcheck(axisPosition, axisVelocity, axisBoundary);
    }
    else return axisPosition;
}

void main() 
{
    //particlesOut[i].position = particlesIn[i].position;
    
    // Kinematic Motion of the Elements of the System
    if (i != j)
    {// Particle Interaction Calculations
        // Interacting Particle Properties
        vec4 p_i = particle_0[i].position;
        vec4 p_j = particle_0[j].position;
        // Velocity Calculation
        particle_1[i].velocity.xyz += Gravity(p_i, p_j) * dt;

        if (length(particle_1[i].velocity.xyz) > c/2)
        {// Sets the Velocity Maximum to the Speed of Light (divided by two bc ITS TOO FAST)
            normalize(particle_1[i].velocity.xyz);
            particle_1[i].velocity.xyz *= c/2;
        }

        particle_1[i].position.xyz += particle_1[i].velocity.xyz * dt;
        //particlesOut[i].velocity = particlesIn[i].velocity;

        // Flip movement at window border
        particle_1[i].position.x = out_of_bounds(particle_1[i].position.x, particle_1[i].velocity.x, boundarySize.x);
        particle_1[i].position.y = out_of_bounds(particle_1[i].position.y, particle_1[i].velocity.y, boundarySize.y);
        particle_1[i].position.z = out_of_bounds(particle_1[i].position.z, particle_1[i].velocity.z, boundarySize.z);
        /*
        if (out_of_bounds(particlesOut[i].position.y, boundarySize.y)) {
            particlesOut[i].velocity.y = -particlesOut[i].velocity.y;
            particlesOut[i].position.y = OOBcheck(particlesOut[i].position.y, particlesOut[i].velocity.y, boundarySize.y);
        }
        if (out_of_bounds(particlesOut[i].position.z, boundarySize.z)) {
            particlesOut[i].velocity.z = -particlesOut[i].velocity.z;
            particlesOut[i].position.z = OOBcheck(particlesOut[i].position.z, particlesOut[i].velocity.z, boundarySize.z);
        }
        */
    }   
}