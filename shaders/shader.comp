#version 450

struct Particle {
	vec3 position;
    vec3 color;
	vec3 velocity; 
};

struct camera {
    mat4 view;
    mat4 proj;
};

struct modelMatrix {
    mat4 model;
};

layout(binding = 0) uniform UniformBufferObject {
    modelMatrix model;
    camera cam;
    float dt;
} ubo;

layout(std140, set = 2, binding = 0) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, set = 2, binding = 1) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position; + particleIn.velocity * ubo.dt;
    particlesOut[index].velocity = particleIn.velocity;
}